generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Settings {
  id                                Int       @id @default(autoincrement())
  collectionName                    String?
  tvdbToken                         String?
  tvdbTokenExpiry                   DateTime?
  comicVineApiKey                   String?
  plexToken                         String?
  plexUrl                           String?
  tvdbApiKey                        String?
  tvdbBearerToken                   String?
  selectedPlayer                    String?
  selectedPlexUser                  String?
  timezone                          String?   @default("UTC")
  tvGeneralPercent                  Int       @default(50)
  moviesGeneralPercent              Int       @default(50)
  customOrderPercent                Int       @default(0)
  partiallyWatchedCollectionPercent Int       @default(75)
  ignoredMovieCollections           String?
  ignoredTVCollections              String?
  christmasFilterEnabled            Boolean   @default(false)
  plexSyncInterval                  Int       @default(12)
  createdAt                         DateTime  @default(now())
  updatedAt                         DateTime  @updatedAt
}

model Order {
  id           Int      @id @default(autoincrement())
  customerName String
  orderDate    DateTime @default(now())
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CustomOrder {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  icon        String?
  parentOrderId Int?            // Foreign key for parent custom order
  
  items       CustomOrderItem[]
  referencingItems CustomOrderItem[] @relation("SubOrderReference") // Items that reference this order as a sub-order
  
  // Self-referencing relationships for hierarchical orders
  parentOrder CustomOrder?      @relation("OrderHierarchy", fields: [parentOrderId], references: [id])
  subOrders   CustomOrder[]     @relation("OrderHierarchy")
}

model CustomOrderItem {
  id                     Int               @id @default(autoincrement())
  customOrderId          Int
  mediaType              String
  plexKey                String?
  title                  String
  seasonNumber           Int?
  episodeNumber          Int?
  seriesTitle            String?
  comicSeries            String?
  comicYear              Int?
  comicIssue             String?
  comicVolume            String?
  comicPublisher         String?
  comicVineId            String?
  comicVineDetailsJson   String?
  
  // NEW: Comprehensive ComicVine fields
  comicVineSeriesId      Int?
  comicVineIssueId       Int?
  comicIssueName         String?
  comicDescription       String?
  comicCoverDate         String?
  comicStoreDate         String?
  comicCreators          String?
  comicCharacters        String?
  comicStoryArcs         String?
  
  customTitle            String?
  bookTitle              String?
  bookAuthor             String?
  bookYear               Int?
  bookIsbn               String?
  bookPublisher          String?
  bookOpenLibraryId      String?
  bookCoverUrl           String?
  bookPageCount          Int?
  bookCurrentPage        Int?
  bookPercentRead        Float?
  storyTitle             String?
  storyAuthor            String?
  storyYear              Int?
  storyUrl               String?
  storyContainedInBookId Int?
  storyCoverUrl          String?
  sortOrder              Int               @default(0)
  isWatched              Boolean           @default(false)
  isFromTvdbOnly         Boolean           @default(false)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  artworkLastCached      DateTime?
  artworkMimeType        String?
  localArtworkPath       String?
  originalArtworkUrl     String?
  webTitle               String?
  webUrl                 String?
  webDescription         String?
  tvdbId                 String?
  tvdbYear               Int?
  tvdbOverview           String?
  tvdbGenres             String?
  tvdbDirector           String?
  tvdbStudio             String?
  tvdbArtworkUrl         String?
  referencedCustomOrderId Int?              // For sub-order items, references the CustomOrder id
  storyContainedInBook   CustomOrderItem?  @relation("StoryInBook", fields: [storyContainedInBookId], references: [id])
  containedStories       CustomOrderItem[] @relation("StoryInBook")
  referencedCustomOrder  CustomOrder?      @relation("SubOrderReference", fields: [referencedCustomOrderId], references: [id])
  customOrder            CustomOrder       @relation(fields: [customOrderId], references: [id], onDelete: Cascade)
  
  // Watch logs for this item
  watchLogs              WatchLog[]
}

model PlexLibrarySection {
  id               Int          @id @default(autoincrement())
  sectionKey       String       @unique
  title            String
  type             String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  agent            String?
  allowSync        Int?
  art              String?
  composite        String?
  content          String?
  contentChangedAt Int?
  createdAt_plex   Int?
  directory        String?
  filters          String?
  hidden           Int?
  language         String?
  refreshing       Int?
  scannedAt        Int?
  scanner          String?
  thumb            String?
  updatedAt_plex   Int?
  uuid             String?
  movies           PlexMovie[]
  tvShows          PlexTVShow[]
}

model PlexTVShow {
  id              Int                  @id @default(autoincrement())
  ratingKey       String               @unique
  title           String
  year            Int?
  summary         String?
  thumb           String?
  art             String?
  leafCount       Int?
  viewedLeafCount Int?
  addedAt         Int?
  updatedAt_plex  Int?
  collections     String?
  sectionKey      String
  lastSyncedAt    DateTime             @default(now())
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  childCount      Int?
  guid            String?
  index           Int?
  key             String?
  lastViewedAt    Int?
  skipCount       Int?
  type            String?
  viewCount       Int?
  genres          PlexGenre[]
  guids           PlexGuid[]
  images          PlexImage[]
  labels          PlexLabel[]
  seasons         PlexSeason[]
  section         PlexLibrarySection   @relation(fields: [sectionKey], references: [sectionKey])
  ultraBlurColors PlexUltraBlurColor[]
}

model PlexSeason {
  id                  Int                  @id @default(autoincrement())
  ratingKey           String               @unique
  title               String
  index               Int
  showRatingKey       String
  leafCount           Int?
  viewedLeafCount     Int?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  addedAt             Int?
  guid                String?
  key                 String?
  lastViewedAt        Int?
  librarySectionID    Int?
  librarySectionKey   String?
  librarySectionTitle String?
  parentGuid          String?
  parentIndex         Int?
  parentKey           String?
  parentRatingKey     String?
  parentThumb         String?
  parentTitle         String?
  skipCount           Int?
  summary             String?
  thumb               String?
  type                String?
  updatedAt_plex      Int?
  viewCount           Int?
  episodes            PlexEpisode[]
  guids               PlexGuid[]
  images              PlexImage[]
  show                PlexTVShow           @relation(fields: [showRatingKey], references: [ratingKey])
  ultraBlurColors     PlexUltraBlurColor[]
}

model PlexEpisode {
  id                    Int                  @id @default(autoincrement())
  ratingKey             String               @unique
  title                 String
  index                 Int
  seasonIndex           Int
  showTitle             String
  seasonRatingKey       String
  viewCount             Int?
  lastViewedAt          Int?
  addedAt               Int?
  summary               String?
  thumb                 String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  originallyAvailableAt String?
  duration              Int?
  grandparentGuid       String?
  grandparentKey        String?
  grandparentRatingKey  String?
  grandparentThumb      String?
  grandparentTitle      String?
  guid                  String?
  key                   String?
  librarySectionID      Int?
  librarySectionKey     String?
  librarySectionTitle   String?
  parentGuid            String?
  parentIndex           Int?
  parentKey             String?
  parentRatingKey       String?
  parentThumb           String?
  parentTitle           String?
  skipCount             Int?
  titleSort             String?
  type                  String?
  updatedAt_plex        Int?
  directors             PlexDirector[]
  season                PlexSeason           @relation(fields: [seasonRatingKey], references: [ratingKey])
  guids                 PlexGuid[]
  images                PlexImage[]
  media                 PlexMedia[]
  ratings               PlexRating[]
  roles                 PlexRole[]
  ultraBlurColors       PlexUltraBlurColor[]
  writers               PlexWriter[]
}

model PlexMovie {
  id                    Int                  @id @default(autoincrement())
  ratingKey             String               @unique
  title                 String
  year                  Int?
  summary               String?
  thumb                 String?
  art                   String?
  viewCount             Int?
  lastViewedAt          Int?
  addedAt               Int?
  updatedAt_plex        Int?
  collections           String?
  sectionKey            String
  lastSyncedAt          DateTime             @default(now())
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  originallyAvailableAt String?
  audienceRating        Float?
  audienceRatingImage   String?
  chapterSource         String?
  contentRating         String?
  duration              Int?
  guid                  String?
  key                   String?
  librarySectionID      Int?
  librarySectionKey     String?
  librarySectionTitle   String?
  primaryExtraKey       String?
  rating                Float?
  ratingImage           String?
  skipCount             Int?
  slug                  String?
  studio                String?
  tagline               String?
  titleSort             String?
  type                  String?
  countries             PlexCountry[]
  directors             PlexDirector[]
  genres                PlexGenre[]
  guids                 PlexGuid[]
  images                PlexImage[]
  labels                PlexLabel[]
  media                 PlexMedia[]
  section               PlexLibrarySection   @relation(fields: [sectionKey], references: [sectionKey])
  producers             PlexProducer[]
  ratings               PlexRating[]
  roles                 PlexRole[]
  ultraBlurColors       PlexUltraBlurColor[]
  writers               PlexWriter[]
}

model TvdbSeries {
  id               Int           @id @default(autoincrement())
  tvdbId           String        @unique
  name             String
  slug             String?
  image            String?
  firstAired       String?
  lastAired        String?
  nextAired        String?
  status           String?
  overview         String?
  year             String?
  country          String?
  originalCountry  String?
  originalLanguage String?
  averageRuntime   Int?
  score            Float?
  lastUpdated      String?
  lastSyncedAt     DateTime      @default(now())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  artworks         TvdbArtwork[]
  seasons          TvdbSeason[]
}

model TvdbSeason {
  id           Int           @id @default(autoincrement())
  tvdbId       String        @unique
  seriesTvdbId String
  number       Int
  name         String?
  image        String?
  overview     String?
  year         Int?
  lastUpdated  String?
  lastSyncedAt DateTime      @default(now())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  artworks     TvdbArtwork[]
  episodes     TvdbEpisode[]
  series       TvdbSeries    @relation(fields: [seriesTvdbId], references: [tvdbId])
}

model TvdbEpisode {
  id           Int        @id @default(autoincrement())
  tvdbId       String     @unique
  seasonTvdbId String
  seriesTvdbId String
  number       Int
  seasonNumber Int
  name         String?
  overview     String?
  image        String?
  aired        String?
  runtime      Int?
  finaleType   String?
  year         Int?
  lastUpdated  String?
  lastSyncedAt DateTime   @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  season       TvdbSeason @relation(fields: [seasonTvdbId], references: [tvdbId])
}

model TvdbArtwork {
  id           Int         @id @default(autoincrement())
  tvdbId       String
  seriesTvdbId String?
  seasonTvdbId String?
  image        String
  thumbnail    String?
  language     String?
  type         Int
  width        Int?
  height       Int?
  score        Float?
  includesText Boolean?
  lastUpdated  String?
  lastSyncedAt DateTime    @default(now())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  season       TvdbSeason? @relation(fields: [seasonTvdbId], references: [tvdbId])
  series       TvdbSeries? @relation(fields: [seriesTvdbId], references: [tvdbId])

  @@unique([tvdbId, seriesTvdbId, seasonTvdbId], name: "artwork_unique_context")
}

model PlexDirector {
  id               Int          @id @default(autoincrement())
  movieRatingKey   String?
  episodeRatingKey String?
  tag              String
  filter           String?
  tagKey           String?
  thumb            String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  episode          PlexEpisode? @relation(fields: [episodeRatingKey], references: [ratingKey])
  movie            PlexMovie?   @relation(fields: [movieRatingKey], references: [ratingKey])
}

model PlexGenre {
  id             Int         @id @default(autoincrement())
  movieRatingKey String?
  showRatingKey  String?
  tag            String
  filter         String?
  tagKey         String?
  thumb          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  show           PlexTVShow? @relation(fields: [showRatingKey], references: [ratingKey])
  movie          PlexMovie?  @relation(fields: [movieRatingKey], references: [ratingKey])
}

model PlexProducer {
  id             Int        @id @default(autoincrement())
  movieRatingKey String?
  tag            String
  filter         String?
  tagKey         String?
  thumb          String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  movie          PlexMovie? @relation(fields: [movieRatingKey], references: [ratingKey])
}

model PlexWriter {
  id               Int          @id @default(autoincrement())
  movieRatingKey   String?
  episodeRatingKey String?
  tag              String
  filter           String?
  tagKey           String?
  thumb            String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  episode          PlexEpisode? @relation(fields: [episodeRatingKey], references: [ratingKey])
  movie            PlexMovie?   @relation(fields: [movieRatingKey], references: [ratingKey])
}

model PlexRole {
  id               Int          @id @default(autoincrement())
  movieRatingKey   String?
  episodeRatingKey String?
  tag              String
  filter           String?
  tagKey           String?
  role             String?
  thumb            String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  episode          PlexEpisode? @relation(fields: [episodeRatingKey], references: [ratingKey])
  movie            PlexMovie?   @relation(fields: [movieRatingKey], references: [ratingKey])
}

model PlexCountry {
  id             Int        @id @default(autoincrement())
  movieRatingKey String?
  tag            String
  filter         String?
  tagKey         String?
  thumb          String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  movie          PlexMovie? @relation(fields: [movieRatingKey], references: [ratingKey])
}

model PlexRating {
  id               Int          @id @default(autoincrement())
  movieRatingKey   String?
  episodeRatingKey String?
  image            String?
  value            Float?
  type             String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  episode          PlexEpisode? @relation(fields: [episodeRatingKey], references: [ratingKey])
  movie            PlexMovie?   @relation(fields: [movieRatingKey], references: [ratingKey])
}

model PlexGuid {
  id               Int          @id @default(autoincrement())
  movieRatingKey   String?
  showRatingKey    String?
  seasonRatingKey  String?
  episodeRatingKey String?
  id_value         String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  episode          PlexEpisode? @relation(fields: [episodeRatingKey], references: [ratingKey])
  season           PlexSeason?  @relation(fields: [seasonRatingKey], references: [ratingKey])
  show             PlexTVShow?  @relation(fields: [showRatingKey], references: [ratingKey])
  movie            PlexMovie?   @relation(fields: [movieRatingKey], references: [ratingKey])
}

model PlexMedia {
  id                    Int          @id @default(autoincrement())
  movieRatingKey        String?
  episodeRatingKey      String?
  id_value              String?
  duration              Int?
  bitrate               Int?
  width                 Int?
  height                Int?
  aspectRatio           Float?
  audioChannels         Int?
  audioCodec            String?
  videoCodec            String?
  videoResolution       String?
  container             String?
  videoFrameRate        String?
  optimizedForStreaming Boolean?
  selected              Boolean?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  episode               PlexEpisode? @relation(fields: [episodeRatingKey], references: [ratingKey])
  movie                 PlexMovie?   @relation(fields: [movieRatingKey], references: [ratingKey])
}

model PlexImage {
  id               Int          @id @default(autoincrement())
  movieRatingKey   String?
  showRatingKey    String?
  seasonRatingKey  String?
  episodeRatingKey String?
  alt              String?
  type             String?
  url              String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  episode          PlexEpisode? @relation(fields: [episodeRatingKey], references: [ratingKey])
  season           PlexSeason?  @relation(fields: [seasonRatingKey], references: [ratingKey])
  show             PlexTVShow?  @relation(fields: [showRatingKey], references: [ratingKey])
  movie            PlexMovie?   @relation(fields: [movieRatingKey], references: [ratingKey])
}

model PlexUltraBlurColor {
  id               Int          @id @default(autoincrement())
  movieRatingKey   String?
  showRatingKey    String?
  seasonRatingKey  String?
  episodeRatingKey String?
  topLeft          String?
  topRight         String?
  bottomLeft       String?
  bottomRight      String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  episode          PlexEpisode? @relation(fields: [episodeRatingKey], references: [ratingKey])
  season           PlexSeason?  @relation(fields: [seasonRatingKey], references: [ratingKey])
  show             PlexTVShow?  @relation(fields: [showRatingKey], references: [ratingKey])
  movie            PlexMovie?   @relation(fields: [movieRatingKey], references: [ratingKey])
}

model PlexLabel {
  id             Int         @id @default(autoincrement())
  movieRatingKey String?
  showRatingKey  String?
  tag            String
  filter         String?
  tagKey         String?
  thumb          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  show           PlexTVShow? @relation(fields: [showRatingKey], references: [ratingKey])
  movie          PlexMovie?  @relation(fields: [movieRatingKey], references: [ratingKey])
}

model WatchLog {
  id              Int      @id @default(autoincrement())
  mediaType       String   // 'tv', 'movie', 'book', 'comic', 'shortstory'
  activityType    String   @default("watch") // 'watch' or 'read'
  title           String
  seriesTitle     String?  // For TV episodes, the series name
  seasonNumber    Int?     // For TV episodes
  episodeNumber   Int?     // For TV episodes
  plexKey         String?  // If available
  customOrderItemId Int?   // Link to custom order item if applicable
  startTime       DateTime
  endTime         DateTime?
  duration        Int?     // Duration in minutes
  totalWatchTime  Int?     // Actual watch/read time in minutes (for pause tracking)
  isCompleted     Boolean  @default(true) // Whether the full content was watched/read
  isPaused        Boolean  @default(false) // Current pause state for active sessions
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Optional relation to custom order item
  customOrderItem CustomOrderItem? @relation(fields: [customOrderItemId], references: [id])
}
