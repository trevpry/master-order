// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Settings {
  id               Int      @id @default(1)
  collectionName   String?
  tvdbToken        String?
  tvdbTokenExpiry  DateTime?
  comicVineApiKey  String?  // ComicVine API key for fetching comic details
  plexToken        String?  // Plex authentication token
  plexUrl          String?  // Plex server URL
  tvdbApiKey       String?  // TVDB API key
  tvdbBearerToken  String?  // TVDB Bearer token for API authentication
  tvGeneralPercent Int      @default(50)  // Percentage for TV General order type
  moviesGeneralPercent Int  @default(50)  // Percentage for Movies General order type
  customOrderPercent Int    @default(0)   // Percentage for Custom Order type
  partiallyWatchedCollectionPercent Int @default(75) // Percentage likelihood to prioritize movies from partially watched collections
  ignoredMovieCollections String?   // JSON array of collection names to ignore for movie selection
  ignoredTVCollections String?     // JSON array of collection names to ignore for TV show selection
  plexSyncInterval Int      @default(12)  // Hours between automatic Plex sync (default 12 hours)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Order {
  id           Int      @id @default(autoincrement())
  customerName String
  orderDate    DateTime @default(now())
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CustomOrder {
  id          Int      @id @default(autoincrement())
  name        String   // User-defined name for the custom order
  description String?  // Optional description
  icon        String?  // Optional SVG icon content for the custom order
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  items       CustomOrderItem[]
}

model CustomOrderItem {
  id            Int         @id @default(autoincrement())
  customOrderId Int
  customOrder   CustomOrder @relation(fields: [customOrderId], references: [id], onDelete: Cascade)
  mediaType     String      // 'movie', 'episode', 'comic', 'book', or 'shortstory'
  plexKey       String      // Plex key for the media item (for comics and books, this will be a generated key)
  title         String      // Title for display purposes
  seasonNumber  Int?        // For episodes only
  episodeNumber Int?        // For episodes only
  seriesTitle   String?     // For episodes only
  // Comic-specific fields
  comicSeries   String?     // For comics only - series name
  comicYear     Int?        // For comics only - publication year
  comicIssue    String?     // For comics only - issue number (can be string for special issues)
  comicVolume   String?     // For comics only - volume information
  // Book-specific fields
  bookTitle     String?     // For books only - book title
  bookAuthor    String?     // For books only - primary author
  bookYear      Int?        // For books only - publication year
  bookIsbn      String?     // For books only - ISBN
  bookPublisher String?     // For books only - publisher
  bookOpenLibraryId String? // For books only - OpenLibrary ID
  bookCoverUrl  String?     // For books only - cover image URL
  // Short story-specific fields
  storyTitle    String?     // For short stories only - story title
  storyAuthor   String?     // For short stories only - story author
  storyYear     Int?        // For short stories only - publication year
  storyUrl      String?     // For short stories only - optional URL link
  storyContainedInBookId Int? // For short stories only - reference to book that contains this story
  storyContainedInBook CustomOrderItem? @relation("StoryInBook", fields: [storyContainedInBookId], references: [id], onDelete: SetNull)
  containedStories CustomOrderItem[] @relation("StoryInBook")
  storyCoverUrl String?     // For short stories only - cover image URL (falls back to book cover if not set)
  sortOrder     Int         @default(0) // For manual ordering
  isWatched     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Plex Library Tables for caching
model PlexLibrarySection {
  id        Int      @id @default(autoincrement())
  sectionKey String  @unique // Plex section key
  title     String   // Section title (e.g. "TV Shows", "Movies")
  type      String   // Section type ("show", "movie")
  // Additional fields from Plex API
  agent             String?  // Scanner agent
  allowSync         Int?     // Allow sync flag
  art               String?  // Art path
  composite         String?  // Composite path
  content           String?  // Content flag
  contentChangedAt  Int?     // Content changed timestamp
  createdAt_plex    Int?     // Plex creation timestamp
  directory         String?  // Directory path
  filters           String?  // JSON string of filters
  hidden            Int?     // Hidden flag
  language          String?  // Language code
  refreshing        Int?     // Refreshing flag
  scannedAt         Int?     // Last scanned timestamp
  scanner           String?  // Scanner type
  thumb             String?  // Thumbnail path
  updatedAt_plex    Int?     // Plex updated timestamp
  uuid              String?  // UUID
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  tvShows   PlexTVShow[]
  movies    PlexMovie[]
}

model PlexTVShow {
  id                Int      @id @default(autoincrement())
  ratingKey         String   @unique // Plex rating key
  title             String   // Series title
  year              Int?     // Release year
  summary           String?  // Description
  thumb             String?  // Thumbnail path
  art               String?  // Art path
  leafCount         Int?     // Total episodes
  viewedLeafCount   Int?     // Watched episodes
  addedAt           Int?     // Plex added timestamp
  updatedAt_plex    Int?     // Plex updated timestamp
  collections       String?  // JSON array of collection names
  // Additional fields from Plex API
  childCount        Int?     // Child count
  guid              String?  // GUID
  index             Int?     // Index
  key               String?  // Key path
  lastViewedAt      Int?     // Last viewed timestamp
  skipCount         Int?     // Skip count
  type              String?  // Type
  viewCount         Int?     // View count
  sectionKey        String   // Foreign key to library section
  section           PlexLibrarySection @relation(fields: [sectionKey], references: [sectionKey])
  // Related complex fields
  genres            PlexGenre[]
  guids             PlexGuid[]
  images            PlexImage[]
  ultraBlurColors   PlexUltraBlurColor[]
  lastSyncedAt      DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  seasons PlexSeason[]
}

model PlexSeason {
  id          Int      @id @default(autoincrement())
  ratingKey   String   @unique // Plex rating key for season
  title       String   // Season title
  index       Int      // Season number
  showRatingKey String // Parent show rating key
  show        PlexTVShow @relation(fields: [showRatingKey], references: [ratingKey])
  leafCount   Int?     // Total episodes in season
  viewedLeafCount Int? // Watched episodes in season
  // Additional fields from Plex API
  addedAt           Int?     // Plex added timestamp
  guid              String?  // GUID
  key               String?  // Key path
  lastViewedAt      Int?     // Last viewed timestamp
  librarySectionID  Int?     // Library section ID
  librarySectionKey String?  // Library section key
  librarySectionTitle String? // Library section title
  parentGuid        String?  // Parent GUID
  parentIndex       Int?     // Parent index
  parentKey         String?  // Parent key
  parentRatingKey   String?  // Parent rating key (should match showRatingKey)
  parentThumb       String?  // Parent thumbnail
  parentTitle       String?  // Parent title
  skipCount         Int?     // Skip count
  summary           String?  // Season description
  thumb             String?  // Thumbnail path
  type              String?  // Type
  updatedAt_plex    Int?     // Plex updated timestamp
  viewCount         Int?     // View count
  // Related complex fields
  guids             PlexGuid[]
  images            PlexImage[]
  ultraBlurColors   PlexUltraBlurColor[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  episodes PlexEpisode[]
}

model PlexEpisode {
  id                  Int      @id @default(autoincrement())
  ratingKey           String   @unique // Plex rating key
  title               String   // Episode title
  index               Int      // Episode number
  seasonIndex         Int      // Season number
  showTitle           String   // Series title (denormalized for easier queries)
  seasonRatingKey     String   // Parent season rating key
  season              PlexSeason @relation(fields: [seasonRatingKey], references: [ratingKey])
  viewCount           Int?     // Watch count
  lastViewedAt        Int?     // Last viewed timestamp
  addedAt             Int?     // Plex added timestamp
  originallyAvailableAt String? // Original air date from Plex (YYYY-MM-DD format)
  summary             String?  // Episode description
  thumb               String?  // Thumbnail path
  // Additional fields from Plex API
  duration            Int?     // Duration in milliseconds
  grandparentGuid     String?  // Grandparent GUID (show)
  grandparentKey      String?  // Grandparent key
  grandparentRatingKey String? // Grandparent rating key (show)
  grandparentThumb    String?  // Grandparent thumbnail
  grandparentTitle    String?  // Grandparent title (show title)
  guid                String?  // GUID
  key                 String?  // Key path
  librarySectionID    Int?     // Library section ID
  librarySectionKey   String?  // Library section key
  librarySectionTitle String?  // Library section title
  parentGuid          String?  // Parent GUID (season)
  parentIndex         Int?     // Parent index (season number)
  parentKey           String?  // Parent key
  parentRatingKey     String?  // Parent rating key (should match seasonRatingKey)
  parentThumb         String?  // Parent thumbnail
  parentTitle         String?  // Parent title (season title)
  skipCount           Int?     // Skip count
  titleSort           String?  // Title sort
  type                String?  // Type
  updatedAt_plex      Int?     // Plex updated timestamp
  // Related complex fields
  directors           PlexDirector[]
  writers             PlexWriter[]
  roles               PlexRole[]
  ratings             PlexRating[]
  guids               PlexGuid[]
  media               PlexMedia[]
  images              PlexImage[]
  ultraBlurColors     PlexUltraBlurColor[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model PlexMovie {
  id                    Int      @id @default(autoincrement())
  ratingKey             String   @unique // Plex rating key
  title                 String   // Movie title
  year                  Int?     // Release year
  summary               String?  // Description
  thumb                 String?  // Thumbnail path
  art                   String?  // Art path
  viewCount             Int?     // Watch count
  lastViewedAt          Int?     // Last viewed timestamp
  addedAt               Int?     // Plex added timestamp
  originallyAvailableAt String?  // Original release date from Plex (YYYY-MM-DD format)
  updatedAt_plex        Int?     // Plex updated timestamp
  collections           String?  // JSON array of collection names
  // Additional fields from Plex API
  audienceRating        Float?   // Audience rating
  audienceRatingImage   String?  // Audience rating image
  chapterSource         String?  // Chapter source
  contentRating         String?  // Content rating (PG, R, etc.)
  duration              Int?     // Duration in milliseconds
  guid                  String?  // GUID
  key                   String?  // Key path
  librarySectionID      Int?     // Library section ID
  librarySectionKey     String?  // Library section key
  librarySectionTitle   String?  // Library section title
  primaryExtraKey       String?  // Primary extra key
  rating                Float?   // Rating
  ratingImage           String?  // Rating image
  skipCount             Int?     // Skip count
  slug                  String?  // Slug
  studio                String?  // Studio
  tagline               String?  // Tagline
  titleSort             String?  // Title sort
  type                  String?  // Type
  sectionKey            String   // Foreign key to library section
  section               PlexLibrarySection @relation(fields: [sectionKey], references: [sectionKey])
  // Related complex fields
  directors             PlexDirector[]
  genres                PlexGenre[]
  producers             PlexProducer[]
  writers               PlexWriter[]
  roles                 PlexRole[]
  countries             PlexCountry[]
  ratings               PlexRating[]
  guids                 PlexGuid[]
  media                 PlexMedia[]
  images                PlexImage[]
  ultraBlurColors       PlexUltraBlurColor[]
  lastSyncedAt          DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// TVDB Caching Tables
model TvdbSeries {
  id               Int      @id @default(autoincrement())
  tvdbId           String   @unique // TVDB series ID
  name             String   // Series name
  slug             String?  // URL slug
  image            String?  // Series image URL
  firstAired       String?  // First aired date
  lastAired        String?  // Last aired date
  nextAired        String?  // Next aired date
  status           String?  // Series status (Continuing, Ended, etc.)
  overview         String?  // Series description
  year             String?  // Year
  country          String?  // Country
  originalCountry  String?  // Original country
  originalLanguage String?  // Original language
  averageRuntime   Int?     // Average runtime in minutes
  score            Float?   // TVDB score
  lastUpdated      String?  // Last updated timestamp from TVDB
  lastSyncedAt     DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  seasons  TvdbSeason[]
  artworks TvdbArtwork[]
}

model TvdbSeason {
  id               Int      @id @default(autoincrement())
  tvdbId           String   @unique // TVDB season ID
  seriesTvdbId     String   // Foreign key to parent series
  series           TvdbSeries @relation(fields: [seriesTvdbId], references: [tvdbId])
  number           Int      // Season number
  name             String?  // Season name
  image            String?  // Season image URL
  overview         String?  // Season description
  year             Int?     // Year
  lastUpdated      String?  // Last updated timestamp from TVDB
  lastSyncedAt     DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  episodes TvdbEpisode[]
  artworks TvdbArtwork[]
}

model TvdbEpisode {
  id               Int      @id @default(autoincrement())
  tvdbId           String   @unique // TVDB episode ID
  seasonTvdbId     String   // Foreign key to parent season
  season           TvdbSeason @relation(fields: [seasonTvdbId], references: [tvdbId])
  seriesTvdbId     String   // Denormalized for easier queries
  number           Int      // Episode number
  seasonNumber     Int      // Season number (denormalized)
  name             String?  // Episode name
  overview         String?  // Episode description
  image            String?  // Episode image URL
  aired            String?  // Air date
  runtime          Int?     // Runtime in minutes
  finaleType       String?  // Finale type (series, season, midseason)
  year             Int?     // Year
  lastUpdated      String?  // Last updated timestamp from TVDB
  lastSyncedAt     DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model TvdbArtwork {
  id               Int      @id @default(autoincrement())
  tvdbId           String   // TVDB artwork ID (not globally unique)
  seriesTvdbId     String?  // Optional foreign key to series
  series           TvdbSeries? @relation(fields: [seriesTvdbId], references: [tvdbId])
  seasonTvdbId     String?  // Optional foreign key to season
  season           TvdbSeason? @relation(fields: [seasonTvdbId], references: [tvdbId])
  image            String   // Image URL
  thumbnail        String?  // Thumbnail URL
  language         String?  // Language code (eng, etc.)
  type             Int      // Artwork type (2=series poster, 7=season poster, etc.)
  width            Int?     // Image width
  height           Int?     // Image height
  score            Float?   // Artwork score
  includesText     Boolean? // Whether artwork includes text
  lastUpdated      String?  // Last updated timestamp from TVDB
  lastSyncedAt     DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([tvdbId, seriesTvdbId, seasonTvdbId], name: "artwork_unique_context")
}

// Plex Complex Field Tables
model PlexDirector {
  id        Int      @id @default(autoincrement())
  movieRatingKey String?
  movie     PlexMovie? @relation(fields: [movieRatingKey], references: [ratingKey])
  episodeRatingKey String?
  episode   PlexEpisode? @relation(fields: [episodeRatingKey], references: [ratingKey])
  tag       String   // Director name
  filter    String?  // Filter value
  tagKey    String?  // Tag key
  thumb     String?  // Director thumbnail
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlexGenre {
  id        Int      @id @default(autoincrement())
  movieRatingKey String?
  movie     PlexMovie? @relation(fields: [movieRatingKey], references: [ratingKey])
  showRatingKey String?
  show      PlexTVShow? @relation(fields: [showRatingKey], references: [ratingKey])
  tag       String   // Genre name
  filter    String?  // Filter value
  tagKey    String?  // Tag key
  thumb     String?  // Genre thumbnail
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlexProducer {
  id        Int      @id @default(autoincrement())
  movieRatingKey String?
  movie     PlexMovie? @relation(fields: [movieRatingKey], references: [ratingKey])
  tag       String   // Producer name
  filter    String?  // Filter value
  tagKey    String?  // Tag key
  thumb     String?  // Producer thumbnail
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlexWriter {
  id        Int      @id @default(autoincrement())
  movieRatingKey String?
  movie     PlexMovie? @relation(fields: [movieRatingKey], references: [ratingKey])
  episodeRatingKey String?
  episode   PlexEpisode? @relation(fields: [episodeRatingKey], references: [ratingKey])
  tag       String   // Writer name
  filter    String?  // Filter value
  tagKey    String?  // Tag key
  thumb     String?  // Writer thumbnail
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlexRole {
  id        Int      @id @default(autoincrement())
  movieRatingKey String?
  movie     PlexMovie? @relation(fields: [movieRatingKey], references: [ratingKey])
  episodeRatingKey String?
  episode   PlexEpisode? @relation(fields: [episodeRatingKey], references: [ratingKey])
  tag       String   // Actor name
  filter    String?  // Filter value
  tagKey    String?  // Tag key
  role      String?  // Character name
  thumb     String?  // Actor thumbnail
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlexCountry {
  id        Int      @id @default(autoincrement())
  movieRatingKey String?
  movie     PlexMovie? @relation(fields: [movieRatingKey], references: [ratingKey])
  tag       String   // Country name
  filter    String?  // Filter value
  tagKey    String?  // Tag key
  thumb     String?  // Country thumbnail
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlexRating {
  id        Int      @id @default(autoincrement())
  movieRatingKey String?
  movie     PlexMovie? @relation(fields: [movieRatingKey], references: [ratingKey])
  episodeRatingKey String?
  episode   PlexEpisode? @relation(fields: [episodeRatingKey], references: [ratingKey])
  image     String?  // Rating image
  value     Float?   // Rating value
  type      String?  // Rating type
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlexGuid {
  id        Int      @id @default(autoincrement())
  movieRatingKey String?
  movie     PlexMovie? @relation(fields: [movieRatingKey], references: [ratingKey])
  showRatingKey String?
  show      PlexTVShow? @relation(fields: [showRatingKey], references: [ratingKey])
  seasonRatingKey String?
  season    PlexSeason? @relation(fields: [seasonRatingKey], references: [ratingKey])
  episodeRatingKey String?
  episode   PlexEpisode? @relation(fields: [episodeRatingKey], references: [ratingKey])
  id_value  String   // GUID value
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlexMedia {
  id        Int      @id @default(autoincrement())
  movieRatingKey String?
  movie     PlexMovie? @relation(fields: [movieRatingKey], references: [ratingKey])
  episodeRatingKey String?
  episode   PlexEpisode? @relation(fields: [episodeRatingKey], references: [ratingKey])
  id_value  String?  // Media ID
  duration  Int?     // Duration
  bitrate   Int?     // Bitrate
  width     Int?     // Width
  height    Int?     // Height
  aspectRatio Float? // Aspect ratio
  audioChannels Int? // Audio channels
  audioCodec String? // Audio codec
  videoCodec String? // Video codec
  videoResolution String? // Video resolution
  container String?  // Container format
  videoFrameRate String? // Video frame rate
  optimizedForStreaming Boolean? // Optimized for streaming
  selected  Boolean? // Selected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlexImage {
  id        Int      @id @default(autoincrement())
  movieRatingKey String?
  movie     PlexMovie? @relation(fields: [movieRatingKey], references: [ratingKey])
  showRatingKey String?
  show      PlexTVShow? @relation(fields: [showRatingKey], references: [ratingKey])
  seasonRatingKey String?
  season    PlexSeason? @relation(fields: [seasonRatingKey], references: [ratingKey])
  episodeRatingKey String?
  episode   PlexEpisode? @relation(fields: [episodeRatingKey], references: [ratingKey])
  alt       String?  // Alt text
  type      String?  // Image type
  url       String?  // Image URL
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlexUltraBlurColor {
  id        Int      @id @default(autoincrement())
  movieRatingKey String?
  movie     PlexMovie? @relation(fields: [movieRatingKey], references: [ratingKey])
  showRatingKey String?
  show      PlexTVShow? @relation(fields: [showRatingKey], references: [ratingKey])
  seasonRatingKey String?
  season    PlexSeason? @relation(fields: [seasonRatingKey], references: [ratingKey])
  episodeRatingKey String?
  episode   PlexEpisode? @relation(fields: [episodeRatingKey], references: [ratingKey])
  topLeft   String?  // Top left color
  topRight  String?  // Top right color
  bottomLeft String? // Bottom left color
  bottomRight String? // Bottom right color
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


